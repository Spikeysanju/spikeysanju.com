generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @unique @default(cuid())
  name                String?
  email               String                @unique
  emailVerified       DateTime?             @map("email_verified")
  image               String?
  role                Role                  @default(USER)
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  accounts            Account[]
  ama                 Ama[]
  blog                Blog[]
  comment             Comment[]
  media               Media[]
  peopleIWannaMeetIRL PeopleIWannaMeetIRL[]
  sessions            Session[]
  tools               Tools[]

  @@map("users")
}

model Media {
  id          String    @id @unique @default(cuid())
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  title       String
  description String?
  type        String
  url         String
  userId      String?   @map("user_id")
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("media")
}

model Blog {
  id          String    @id @unique @default(cuid())
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  title       String    @db.VarChar(255)
  description String    @db.VarChar(255)
  content     String
  category    String[]
  slug        String    @unique
  userId      String?   @map("user_id")
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment     Comment[]

  @@map("blogs")
}

model Ama {
  id          String    @id @unique @default(cuid())
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  question    String
  description String
  flair       String
  slug        String?    @unique
  userId      String?   @map("user_id")
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment     Comment[]

  @@map("amas")
}

model Tools {
  id          String    @id @unique @default(cuid())
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  name        String
  description String
  image       String
  link        String
  slug        String?    @unique
  userId      String?   @map("user_id")
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment     Comment[]

  @@map("tools")
}

model PeopleIWannaMeetIRL {
  id        String    @id @unique @default(cuid())
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  name      String
  image     String?
  link      String
  tags      String[]  @db.VarChar(255)
  met       Boolean   @default(false)
  userId    String?   @map("user_id")
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("people_i_wanna_meet_irl")
}

model Comment {
  id              String          @id @unique @default(cuid())
  createdAt       DateTime?       @default(now()) @map("created_at")
  updatedAt       DateTime?       @updatedAt @map("updated_at")
  content         String
  commentProvider CommentProvider @default(ASKMEANYTHING) @map("comment_provider")
  blogId          String?         @map("blog_id")
  amaId           String?         @map("ama_id")
  userId          String?         @map("user_id")
  toolsId         String?         @map("tools_id")
  ama             Ama?            @relation(fields: [amaId], references: [id], onDelete: Cascade)
  blog            Blog?           @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tools           Tools?          @relation(fields: [toolsId], references: [id], onDelete: Cascade)
  user            User?           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  expires_at         Int?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  USER
  ADMIN
}

enum CommentProvider {
  ASKMEANYTHING
  BLOG
  TOOLSIUSE
  BOOKS
  GUESTBOOK
}
