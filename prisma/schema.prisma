// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @unique @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  comment       Comment[]
  ama           Ama[]
  sessions      Session[]

  @@map("users")
}

model Ama {
  id          String    @id @unique @default(cuid())
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  title       String    @db.VarChar(255)
  description String    @db.VarChar(255)
  label       String
  comment     Comment[]
  provider    String
  userId      String?   @map("user_id")
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("amas")
}

model Comment {
  id        String    @id @unique @default(cuid())
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  content   String
  provider  String
  amaId     String?   @map("ama_id")
  ama       Ama?      @relation(fields: [amaId], references: [id], onDelete: Cascade)
  userId    String?   @map("user_id")
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  USER
  ADMIN
}
